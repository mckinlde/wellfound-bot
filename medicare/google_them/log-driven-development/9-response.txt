You‚Äôve nailed the diagnosis:

Right now, when you hit a CAPTCHA and solve it, the script doesn‚Äôt *re-parse* the search results page before continuing. It‚Äôs still holding onto the old soup object created **before** you solved the challenge, so it sees ‚Äú0 PDFs‚Äù and moves on. That‚Äôs why you see the page clearly has SoB, EoC, and Formulary, but the script reports ‚ÄúNOT FOUND.‚Äù

We need two fixes:

---

### 1. After CAPTCHA, re-fetch and re-parse

Instead of just `soup = BeautifulSoup(driver.page_source, "html.parser")` right after `input()`, we should **force another small wait and re-parse** once Google has redirected back to the search results page.

Something like:

```python
if soup.select_one("#recaptcha-anchor") or "recaptcha" in driver.page_source.lower():
    input("[ACTION] CAPTCHA detected. Solve it in the browser, then press Enter here to continue...")
    # Give Google a chance to load the results after captcha
    polite_sleep()
    # Re-parse the (now real) search results page
    soup = BeautifulSoup(driver.page_source, "html.parser")
```

Optionally, also verify that at least one `<div class="g">` or `<a href="/url?">` is present before continuing.

---

### 2. More explicit logging

We should log *every search page* as it happens, and also log the PDF links found. For example:

```
[SEARCH] H4513-077-3 broad, page 1 ‚Üí found 2 links
    [CANDIDATE] Summary_of_Benefits ‚Üí https://www.cigna.com/docs/sb-h4513-077-003.pdf
    [CANDIDATE] Evidence_of_Coverage ‚Üí https://www.cigna.com/docs/eoc-h4513-077-003.pdf
```

That way you‚Äôll see **what was actually parsed**, and if categorization failed you‚Äôll have evidence in the logs.

---

### 3. No crash on ‚Äúnot found‚Äù

Right now the summary line is trying to build keys like `Summary_pdf_link` which don‚Äôt exist when nothing is found. We‚Äôll fix that by explicitly using the row‚Äôs keys and defaulting to ‚ÄúNOT FOUND‚Äù if missing:

```python
summary = []
for doc_label in DOC_TYPES.keys():
    link_field = {
        "Summary_of_Benefits": "SOB_pdf_link",
        "Evidence_of_Coverage": "EoC_pdf_link",
        "Drug_Formulary": "formulary_pdf_link",
    }[doc_label]
    summary.append(f"{doc_label}={'FOUND' if row.get(link_field) else 'NOT FOUND'}")
print(f"[SUMMARY] ({idx}/{total}) {plan_id} ‚Üí " + ", ".join(summary))
```

---

üëâ If you like, I can send you a **patched full script** that:

* Forces re-parse after CAPTCHA.
* Adds `[SEARCH]` and `[CANDIDATE]` logs.
* Fixes the summary builder to avoid crashing.
* Ensures we download what‚Äôs found **before** moving to targeted searches.

Would you like me to drop in that full updated version now?
